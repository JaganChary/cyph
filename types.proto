syntax = "proto3";


/** Metadata of one contact relationship of an account. */
message AccountContactRecord {
	/** Relationship ID. */
	required string id = 1;

	/** Contact username. */
	required string username = 2;
}

/** Metadata of one file stored in an account. */
message AccountFileRecord {
	/** Possible file record types. */
	enum RecordTypes {
		File = 0;
		Doc = 1;
		Form = 2;
		Note = 3;
	}

	/** File ID. */
	required string id = 1;

	/** File MIME type. */
	required string mediaType = 2;

	/** File name. */
	required string name = 3;

	/** Type of file record. */
	required RecordTypes recordType = 4;

	/** Size in bytes. */
	required double size = 5;

	/** Timestamp of upload or last save. */
	required double timestamp = 6;

	/** Indicates whether this file was originally an anonymous share. */
	bool wasAnonymousShare = 7;
}

/** Shareable reference to a file record. */
message AccountFileReference {
	/** File record ID. */
	required string id = 1;

	/** Symmetric key used for encrypting file. */
	required bytes key = 2;

	/** Username of owner. */
	required string owner = 3;
}

/** Contains a file reference. */
message AccountFileReferenceContainer {
	/** Anonymously shared file data. */
	message AnonymousShare {
		/** @see AccountFileRecord */
		required AccountFileRecord accountFileRecord = 1;

		/** @see AccountFileReference.key */
		required bytes key = 2;
	}

	/** Signed file data. */
	message SignedShare {
		/** @see AccountFileReference */
		required bytes accountFileReference = 1;

		/** @see AccountFileReference.owner */
		required string owner = 2;
	}

	oneof value {
		AnonymousShare anonymousShare = 1;
		SignedShare signedShare = 2;
	}
}

/** Augmented PAKE login data. */
message AccountLoginData {
	/** Randomly generated password for database authentication. */
	required string secondaryPassword = 1;

	/** Symmetric key for encrypting user data. */
	required bytes symmetricKey = 2;
}

/** User public profile. */
message AccountUserProfile {
	/** Description. */
	required string description = 1;

	/** Premium account. */
	required bool hasPremium = 2;

	/** Full name. */
	required string name = 3;

	/** Username (capitalized according to user preference). */
	required string realUsername = 4;

	/** Usernames and similar identifiers for external services like social media. */
	map<string, string> externalUsernames = 5;
}

/** User presence. */
message AccountUserPresence {
	/** Possible presence statuses. */
	enum Statuses {
		Offline = 0;
		Away = 1;
		Busy = 2;
		Online = 3;
	}

	/** Current presence status. */
	required Statuses status = 7;
}

/** AGSE-PKI certificate. */
message AccountUserPublicKeys {
	/** Potassium.Box public key. */
	required bytes encryption = 1;

	/** Potassium.Sign public key. */
	required bytes signing = 2;
}

/** AGSE-PKI certificate. */
message AGSEPKICert {
	/** @see AccountUserPublicKeys.signing */
	required AGSEPKICSR agsePKICSR = 1;

	/** Timestamp of certificate issuance. */
	required double timestamp = 2;
}

/** AGSE-PKI certificate signing request. */
message AGSEPKICSR {
	/** @see AccountUserPublicKeys.signing */
	required bytes publicSigningKey = 1;

	/** Username. */
	required string username = 2;
}

/** Castle incoming messages. */
message CastleIncomingMessages {
	/** List of received cyphertexts with a particular message ID. */	
	message CastleIncomingMessageItem {
		/** @see CastleIncomingMessageItem */
		repeated bytes cyphertexts = 1;
	}

	/** Mapping of message IDs to CastleIncomingMessageItems. */
	map<uint32, CastleIncomingMessageItem> incomingMessages = 1;
}

/** ChannelService message. */
message ChannelMessage {
	/** Cyphertext. */
	required bytes cyphertext = 1;

	/** User who sent the message. */
	required string author = 2;
}

/** Represents one message in a chat. */
message ChatMessage {
	/** Author types. */
	enum AuthorTypes {
		App = 0;
		Local = 1;
		Remote = 2;
	}

	/** Author user ID. */
	string authorID = 1;

	/** @see AuthorTypes */
	required AuthorTypes authorType = 2;

	/** @see SessionMessageData.id */
	required string id = 3;

	/** @see SessionText.selfDestructTimeout */
	uint32 selfDestructTimeout = 4;

	/** @see SessionText.text */
	required string text = 5;

	/** @see SessionMessageData.timestamp */
	required double timestamp = 6;
}

/** Chat unconfirmed messages. */
message ChatUnconfirmedMessages {
	/** Mapping of message IDs to confirmation statuses. */
	map<string, bool> unconfirmedMessages = 1;
}

/** Represents a form that a user can submit responses to. */
message Form {
	/** Reusable building block consisting of multiple forms. */
	message Component {
		/** @see ElementRow */
		repeated ElementRow rows = 1;
	}

	/** One element of a Form, and one column of an ElementRow. */
	message Element {
		/** Element input types. */
		enum Types {
			Text = 0;
			Checkbox = 1;
			Datepicker = 2;
			Email = 3;
			Input = 4;
			Number = 5;
			Password = 6;
			Radio = 7;
			Select = 8;
			Slider = 9;
			SlideToggle = 10;
			Textarea = 11;
			Time = 12;
			URL = 13;
		}

		/** Title/label. */
		string label = 1;

		/** Input mask (serialized with MessagePack). */
		bytes mask = 2;

		/** Maximum numerical value. */
		double max = 3;

		/** Minimum numerical value. */
		double min = 4;

		/** Options to use if type Radio or Select. */
		repeated string options = 5;

		/** Indicates whether required. */
		bool required = 6;

		/** @see Type */
		required Types type = 7;

		/** Value. */
		oneof value {
			bool valueBoolean = 8;
			double valueNumber = 9;
			string valueString = 10;
		}

		/** Flexbox column width (as a percentage of the total row width). */
		uint32 width = 11;
	}

	/** Row of elements. */
	message ElementRow {
		/** @see Element */
		repeated Element elements = 1;
	}

	/** @see Component */
	repeated Component components = 1;
}

/** An asymmetric key pair. */
message KeyPair {
	/** Private key. */
	required bytes privateKey = 1;

	/** Public key. */
	required bytes publicKey = 2;
}

/** A set of supported capabilities. */
message SessionCapabilities {
	/** Native crypto / SubtleCrypto. */
	required bool nativeCrypto = 1;

	/** P2P networking / WebRTC. */
	required bool p2p = 2;
}

/** Misc information about the state of a chat. */
message SessionChatState {
	/** Indicates whether this party is actively typing. */
	required bool isTyping = 1;
}

/** Contains an RPC call for a specific method. */
message SessionCommand {
	/** Argument to pass to method (serialized with MessagePack). */
	bytes argument = 1;

	/** Method name. */
	required string method = 2;
}

/** Message to be sent over a session, indicating some RPC event. */
message SessionMessage {
	/** Event name (e.g. "text"). */
	required string event = 1;

	/** Associated data (e.g. a user-facing chat message). */
	required SessionMessageData data = 2;
}

/** Message data. */
message SessionMessageData {
	/** Unique ID. */
	required string id = 1;

	/** Timestamp of this message. */
	required double timestamp = 2;

	/** Arbitrary bytes. */
	bytes bytes = 3;

	/** @see SessionCapabilities */
	SessionCapabilities capabilities = 4;

	/** @see SessionChatState */
	SessionChatState chatState = 5;

	/** @see SessionCommand */
	SessionCommand command = 6;

	/** @see SessionText */
	SessionText text = 7;

	/** @see SessionTextConfirmation */
	SessionTextConfirmation textConfirmation = 8;

	/** @see SessionTransfer */
	SessionTransfer transfer = 9;
}

/** Array of session messages. */
message SessionMessageList {
	/** Messages. */
	repeated SessionMessage messages = 1;
}

/** Contains an actual chat text message. */
message SessionText {
	/** Self-destruction timeout. */
	uint32 selfDestructTimeout = 1;

	/** Message text. */
	required string text = 2;
}

/** Receipt confirmation for a SessionText. */
message SessionTextConfirmation {
	/** SessionText ID to be confirmed. */
	required string id = 1;
}

/** Represents an active file transfer. */
message SessionTransfer {
	/** Possible responses to a transfer request. */
	enum Answers {
		Empty = 0;
		Accepted = 1;
		Rejected = 2;
	}

	/** Indicates a non-response to, acceptance of, or rejection of a file transfer. */
	required Answers answer = 1;

	/** Unique ID to represent this file transfer. */
	required string id = 2;

	/** Indicates whether file should be handled as an image. */
	required bool image = 3;

	/** If image is true, this will be used as a self-destruct timeout for the message. */
	required uint32 imageSelfDestructTimeout = 4;

	/** Indicates whether file is being sent from this Cyph instance. */
	required bool isOutgoing = 5;

	/** Symmetric key used for encrypting file over the wire. */
	required bytes key = 6;

	/** MIME type. */
	required string mediaType = 7;

	/** File name. */
	required string name = 8;

	/** Indicates the time at which the file was received. */
	double receiptTimestamp = 9;

	/** File size in bytes. */
	required uint32 size = 10;

	/** File URL. */
	required string url = 11;
}


/* Generic/primitive types */

message BooleanArray {
	repeated bool data = 1;
}

message BooleanValue {
	required bool data = 1;
}

message NumberArray {
	repeated double data = 1;
}

message NumberValue {
	required double data = 1;
}

message StringArray {
	repeated string data = 1;
}

message StringValue {
	required string data = 1;
}

message Uint32Array {
	repeated uint32 data = 1;
}

message Uint32Value {
	required uint32 data = 1;
}
