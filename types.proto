syntax = "proto3";


/** Metadata of one file stored in an account. */
message AccountFileRecord {
	/** Possible file record types. */
	enum RecordTypes {
		Appointment = 0;
		File = 1;
		Doc = 2;
		Form = 3;
		Note = 4;
	}

	/** File ID. */
	required string id = 1;

	/** File MIME type. */
	required string mediaType = 2;

	/** File name. */
	required string name = 3;

	/** Type of file record. */
	required RecordTypes recordType = 4;

	/** Size in bytes. */
	required double size = 5;

	/** Timestamp of upload or last save. */
	required double timestamp = 6;

	/** Indicates whether this file was originally an anonymous share. */
	bool wasAnonymousShare = 7;
}

/** Shareable reference to a file record. */
message AccountFileReference {
	/** File record ID. */
	required string id = 1;

	/** Symmetric key used for encrypting file. */
	required bytes key = 2;

	/** Username of owner. */
	required string owner = 3;
}

/** Contains a file reference. */
message AccountFileReferenceContainer {
	/** Anonymously shared file data. */
	message AnonymousShare {
		/** @see AccountFileRecord */
		required AccountFileRecord accountFileRecord = 1;

		/** @see AccountFileReference.key */
		required bytes key = 2;
	}

	/** Signed file data. */
	message SignedShare {
		/** @see AccountFileReference */
		required bytes accountFileReference = 1;

		/** @see AccountFileReference.owner */
		required string owner = 2;
	}

	oneof value {
		AnonymousShare anonymousShare = 1;
		SignedShare signedShare = 2;
	}
}

/** Augmented PAKE login data. */
message AccountLoginData {
	/** Randomly generated password for database authentication. */
	required string secondaryPassword = 1;

	/** Symmetric key for encrypting user data. */
	required bytes symmetricKey = 2;
}

/** User presence. */
message AccountUserPresence {
	/** Possible presence statuses. */
	enum Statuses {
		Offline = 0;
		Away = 1;
		Busy = 2;
		Online = 3;
	}

	/** Current presence status. */
	required Statuses status = 1;
}

/** User public profile. */
message AccountUserProfile {
	/** Description. */
	required string description = 1;

	/** Usernames and similar identifiers for external services like social media. */
	map<string, string> externalUsernames = 2;

	/** Premium account. */
	required bool hasPremium = 3;

	/** Full name. */
	required string name = 4;

	/** Username (capitalized according to user preference). */
	required string realUsername = 5;

	/** @see AccountUserTypes */
	required AccountUserTypes userType = 6;
}

/** User public profile additional data. */
message AccountUserProfileExtra {
	/** Language skill. */
	message Language {
		/** Language name. */
		string language = 1;

		/** @see Proficiency */
		Proficiency proficiency = 2;
	}

	/** Any sort of vocational or educational position. */
	message Position {
		/** Extra information (e.g. position title or degree subject). */
		string detail = 1;

		/** End date timestamp. */
		double endDate = 2;

		/* Name of location/institution (e.g. SpaceX). */
		string locationName = 3;

		/* URL of location/institution (e.g. spacex.com). */
		string locationURL = 4;

		/** Start date timestamp. */
		double startDate = 5;
	}

	/** Level of proficiency in a skill. */
	enum Proficiency {
		Basic = 0;
		Intermediate = 1;
		Fluent = 2;
		Native = 3;
	}

	/** Physical address. */
	string address = 1;

	/** Appointments. */
	repeated Appointment appointments = 2;

	/** Educational history. */
	repeated Position education = 3;

	/** Gender. */
	string gender = 4;

	/** Insurance */
	StringArray insurance = 5;

	/** Languages */
	repeated Language languages = 6;

	/** NPI Numbers */
	StringArray npi = 7;

	/** Username of parent organization. */
	string organization = 8;

	/** Specialties */
	StringArray specialties = 9;

	/** Work history. */
	repeated Position work = 10;
}

/** AGSE-PKI certificate. */
message AccountUserPublicKeys {
	/** Potassium.Box public key. */
	required bytes encryption = 1;

	/** Potassium.Sign public key. */
	required bytes signing = 2;
}

/** Account types for different Cyph-based applications. */
enum AccountUserTypes {
	Standard = 0;
	Org = 1;
	TelehealthAdmin = 2;
	TelehealthDoctor = 3;
}

/** AGSE-PKI certificate. */
message AGSEPKICert {
	/** @see AccountUserPublicKeys.signing */
	required AGSEPKICSR agsePKICSR = 1;

	/** Timestamp of certificate issuance. */
	required double timestamp = 2;
}

/** AGSE-PKI certificate signing request. */
message AGSEPKICSR {
	/** @see AccountUserPublicKeys.signing */
	required bytes publicSigningKey = 1;

	/** Username. */
	required string username = 2;
}

/** AGSE-PKI history of previous issuances. */
message AGSEPKIIssuanceHistory {
	/** Public key hashes. */
	map<string, bool> publicSigningKeyHashes = 1;

	/** Timestamp. */
	required double timestamp = 2;

	/** Usernames. */
	map<string, bool> usernames = 3;
}

/** Appointment. */
message Appointment {
	/** Roles of participants. */
	enum Roles {
		Default = 0;
		TelehealthDoctor = 1;
		TelehealthPatient = 2;
	}

	/** RSVP statuses. */
	enum RSVP {
		Maybe = 0;
		No = 1;
		Yes = 2;
	}

	/** @see CalendarInvite */
	required CalendarInvite calendarInvite = 1;

	/** Relevant forms. */
	repeated Form forms = 2;

	/** Notes taken during the appointment. */
	string notes = 3;

	/** Confirmation that the appointment occurred. */
	bool occurred = 4;

	/** Participant usernames. */
	repeated string participants = 5;

	/** Map of usernames to roles. */
	map<string, Roles> roles = 6;

	/** Map of usernames to RSVP statuses. TODO: Architect this as a group chat. */
	map<string, RSVP> rsvps = 7;
}

/** Calendar invite. */
message CalendarInvite {
	/** Days of the week for appointments. */
	enum DaysOfWeek {
		Sunday = 0;
		Monday = 1;
		Tuesday = 2;
		Wednesday = 3;
		Thursday = 4;
		Friday = 5;
		Saturday = 6;
	}

	/** Time periods of the day for appointments. */
	enum TimeFrames {
		Morning = 0;
		Afternoon = 1;
		Evening = 2;
	}

	/** Preferred days for counteroffers. */
	map<uint32, bool> alternateDays = 1;

	/** Preferred time frames days for counteroffers. */
	map<uint32, bool> alternateTimeFrames = 2;

	/** Event description. */
	string description = 3;

	/** End timestamp. */
	double endTime = 4;

	/** Start timestamp. */
	double startTime = 5;

	/** Event title/subject. */
	string title = 6;
}

/** Castle incoming messages. */
message CastleIncomingMessages {
	/** List of received cyphertexts with a particular message ID. */
	message CastleIncomingMessageItem {
		/** @see CastleIncomingMessageItem */
		repeated bytes cyphertexts = 1;
	}

	/** Mapping of message IDs to CastleIncomingMessageItems. */
	map<uint32, CastleIncomingMessageItem> incomingMessages = 1;
}

/** ChannelService message. */
message ChannelMessage {
	/** Cyphertext. */
	required bytes cyphertext = 1;

	/** User who sent the message. */
	required string author = 2;
}

/** Represents one message in a chat. */
message ChatMessage {
	/** Author types. */
	enum AuthorTypes {
		App = 0;
		Local = 1;
		Remote = 2;
	}

	/** Author user ID. */
	string authorID = 1;

	/** @see AuthorTypes */
	required AuthorTypes authorType = 2;

	/** Metadata used to estimate message's size for virtual scrolling. */
	repeated ChatMessageLine dimensions = 3;

	/** @see SessionMessageData.id */
	required string id = 4;

	/** @see SessionText.selfDestructTimeout */
	uint32 selfDestructTimeout = 5;

	/** @see SessionMessageData.timestamp */
	required double timestamp = 6;

	/** @see ChatMessageValue */
	ChatMessageValue value = 7;
}

/** Dimensions for one message line. */
message ChatMessageLine {
	/** Line height on a big screen. */
	required uint32 bigScreenHeight = 1;

	/** Line width on a big screen. */
	required uint32 bigScreenWidth = 2;

	/** Line height on a small screen. */
	required uint32 smallScreenHeight = 3;

	/** Line width on a small screen. */
	required uint32 smallScreenWidth = 4;
}

/** Possible values of a chat text message. */
message ChatMessageValue {
	/** Value. */
	oneof value {
		CalendarInvite calendarInvite = 1;
		Form form = 2;
		bytes quill = 3;
		string text = 4;
	}
}

/** Possible types of a chat text message value. */
enum ChatMessageValueTypes {
	CalendarInvite = 0;
	Form = 1;
	Quill = 2;
	Text = 3;
}

/** Chat unconfirmed messages. */
message ChatUnconfirmedMessages {
	/** Mapping of message IDs to confirmation statuses. */
	map<string, bool> unconfirmedMessages = 1;
}

/** Angular CLI environment configuration. */
message Environment {
	/** Custom build environment data. */
	message CustomBuild {
		/** Voice call background image for this custom build. */
		bytes audioImage = 1;

		/** @see CustomBuildConfig */
		required CustomBuildConfig config = 2;

		/** Custom styling. */
		string css = 3;

		/** Identifier of this custom build. */
		required string id = 4;

		/** Walken image replacement for this custom build. */
		bytes errorImage = 5;

		/** Favicon for this custom build. */
		bytes favicon = 6;

		/** Horizontal logo for this custom build. */
		bytes logoHorizontal = 7;

		/** Vertical logo for this custom build. */
		bytes logoVertical = 8;

		/** Replacement strings for this custom build. */
		map<string, string> strings = 9;
	}

	/** Custom build configuration. */
	message CustomBuildConfig {
		/** Indicates whether environment should be accounts-only (no ephemeral). */
		bool accountsOnly = 1;

		/** Indicates whether this is for a browser extension. */
		bool browserExtension = 2;

		/** Optional custom background color. */
		string backgroundColor = 3;

		/** If true, performs audio call by default. */
		bool callTypeAudio = 4;

		/** If true, performs video call by default (takes priority over callTypeAudio). */
		bool callTypeVideo = 5;

		/** If true, forces the use of Twilio TURN infrastructure for lower-latency calls. */
		bool disableP2P = 6;

		/** Indicates whether docs will be enabled. */
		bool enableDocs = 7;

		/** Optional custom foreground color. */
		string foregroundColor = 8;

		/** Indicates whether native crypto will be used. */
		bool nativeCrypto = 9;

		/** Organization username to associate with this custom build. */
		string organization = 10;

		/** Optional password to lock down environment (not a security feature). */
		string password = 11;

		/** Indicates whether this is the telehealth version. */
		bool telehealth = 12;

		/** Page title of this Cyph instance. */
		string title = 13;

		/** If true, environment will be full white label, with no "Powered by Cyph" notices. */
		bool whiteLabel = 14;
	}

	/**
	 * Exists if in a custom build environment.
	 * @see CustomBuild
	 */
	CustomBuild customBuild = 1;

	/** Name of this environment. */
	required string envName = 2;

	/** Firebase API key. */
	required string firebaseApiKey = 3;

	/** Firebase project ID. */
	required string firebaseProject = 4;

	/** Indicates whether this is local development environment. */
	required bool local = 5;

	/** Indicates whether this is prod. */
	required bool production = 6;
}

/** Represents a form that a user can submit responses to. */
message Form {
	/** Reusable building block consisting of multiple forms. */
	message Component {
		/** @see ElementRow */
		repeated ElementRow rows = 1;

		/** @see Form.id */
		string id = 2;

		/** @see Form.idSeparator */
		string idSeparator = 3;
	}

	/** One element of a Form, and one column of an ElementRow. */
	message Element {
		/** Element input types. */
		enum Types {
			Text = 0;
			Checkbox = 1;
			Datepicker = 2;
			Email = 3;
			Input = 4;
			Number = 5;
			Password = 6;
			Radio = 7;
			Select = 8;
			Slider = 9;
			SlideToggle = 10;
			Textarea = 11;
			Time = 12;
			URL = 13;
		}

		/** @see Form.id */
		string id = 1;

		/** Title/label. */
		string label = 2;

		/** Input mask (serialized with MessagePack). */
		bytes mask = 3;

		/** Maximum numerical value. */
		double max = 4;

		/** Minimum numerical value. */
		double min = 5;

		/** Options to use if type Radio or Select. */
		repeated string options = 6;

		/** Indicates whether required. */
		bool required = 7;

		/** @see Type */
		required Types type = 8;

		/** Value. */
		oneof value {
			bool valueBoolean = 9;
			double valueNumber = 10;
			string valueString = 11;
		}

		/** Flexbox column width (as a percentage of the total row width). */
		uint32 width = 12;
	}

	/** Row of elements. */
	message ElementRow {
		/** @see Element */
		repeated Element elements = 1;

		/** @see Form.id */
		string id = 2;

		/** @see Form.id */
		string idSeparator = 3;
	}

	/** @see Component */
	repeated Component components = 1;

	/** Optional ID. Can be used for associating with fields in other systems. */
	string id = 2;

	/** Separator for concatenating element values when sending to another system. */
	string idSeparator = 3;
}

/** An asymmetric key pair. */
message KeyPair {
	/** Private key. */
	required bytes privateKey = 1;

	/** Public key. */
	required bytes publicKey = 2;
}

/** A review of something. */
message Review {
	/** A rating between 0 and 100. */
	required uint32 rating = 1;

	/** Review text. */
	string text = 2;

	/** Timestamp of this review. */
	required double timestamp = 3;
}

/** A set of supported capabilities. */
message SessionCapabilities {
	/** P2P networking / WebRTC. */
	required bool p2p = 1;
}

/** Misc information about the state of a chat. */
message SessionChatState {
	/** Indicates whether this party is actively typing. */
	required bool isTyping = 1;
}

/** Contains an RPC call for a specific method. */
message SessionCommand {
	/** Used to ensure that the command is being run in the correct context (e.g. P2P session). */
	string additionalData = 1;

	/** Argument to pass to method (serialized with MessagePack). */
	bytes argument = 2;

	/** Method name. */
	required string method = 3;
}

/** Message to be sent over a session, indicating some RPC event. */
message SessionMessage {
	/** Event name (e.g. "text"). */
	required string event = 1;

	/** Associated data (e.g. a user-facing chat message). */
	required SessionMessageData data = 2;
}

/** Message data. */
message SessionMessageData {
	/** Unique ID. */
	required string id = 1;

	/** Timestamp of this message. */
	required double timestamp = 2;

	/** Arbitrary bytes. */
	bytes bytes = 3;

	/** @see SessionCapabilities */
	SessionCapabilities capabilities = 4;

	/** @see SessionChatState */
	SessionChatState chatState = 5;

	/** @see SessionCommand */
	SessionCommand command = 6;

	/** @see SessionText */
	SessionText text = 7;

	/** @see SessionTextConfirmation */
	SessionTextConfirmation textConfirmation = 8;

	/** @see SessionTransfer */
	SessionTransfer transfer = 9;
}

/** Array of session messages. */
message SessionMessageList {
	/** Messages. */
	repeated SessionMessage messages = 1;
}

/** Contains an actual chat text message. */
message SessionText {
	/** @see ChatMessage.dimensions */
	repeated ChatMessageLine dimensions = 1;

	/** Indicates whether entire chat should be self-destructed (only valid for first message). */
	bool selfDestructChat = 2;

	/** Self-destruction timeout. */
	uint32 selfDestructTimeout = 3;

	/** @see ChatMessageValue */
	required ChatMessageValue value = 4;
}

/** Receipt confirmation for a SessionText. */
message SessionTextConfirmation {
	/** SessionText ID to be confirmed. */
	required string id = 1;
}

/** Represents an active file transfer. */
message SessionTransfer {
	/** Possible responses to a transfer request. */
	enum Answers {
		Empty = 0;
		Accepted = 1;
		Rejected = 2;
	}

	/** Indicates a non-response to, acceptance of, or rejection of a file transfer. */
	required Answers answer = 1;

	/** Unique ID to represent this file transfer. */
	required string id = 2;

	/** Indicates whether file should be handled as an image. */
	required bool image = 3;

	/** If image is true, this will be used as a self-destruct timeout for the message. */
	required uint32 imageSelfDestructTimeout = 4;

	/** Indicates whether file is being sent from this Cyph instance. */
	required bool isOutgoing = 5;

	/** Symmetric key used for encrypting file over the wire. */
	required bytes key = 6;

	/** MIME type. */
	required string mediaType = 7;

	/** File name. */
	required string name = 8;

	/** Indicates the time at which the file was received. */
	double receiptTimestamp = 9;

	/** File size in bytes. */
	required uint32 size = 10;

	/** File URL. */
	required string url = 11;
}


/* Generic/primitive types */

message Internal {
	message BooleanArray {
		repeated bool data = 1;
	}

	message BooleanMap {
		map<string, bool> data = 1;
	}

	message BooleanValue {
		required bool data = 1;
	}

	message NumberArray {
		repeated double data = 1;
	}

	message NumberValue {
		required double data = 1;
	}

	message StringArray {
		repeated string data = 1;
	}

	message StringMap {
		map<string, string> data = 1;
	}

	message StringValue {
		required string data = 1;
	}

	message Uint32Array {
		repeated uint32 data = 1;
	}

	message Uint32Value {
		required uint32 data = 1;
	}
}
