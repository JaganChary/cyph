syntax = "proto3";


/** Castle incoming messages. */
message CastleIncomingMessages {
	/** List of received cyphertexts with a particular message ID. */	
	message CastleIncomingMessageItem {
		/** @see CastleIncomingMessageItem */
		repeated bytes cyphertexts = 1;
	}

	/** Mapping of message IDs to CastleIncomingMessageItems. */
	map<uint32, CastleIncomingMessageItem> incomingMessages = 1;
}

/** ChannelService message. */
message ChannelMessage {
	/** Cyphertext. */
	required bytes cyphertext = 1;

	/** User who sent the message. */
	required string author = 2;
}

/** Represents one message in a chat. */
message ChatMessage {
	/** @see SessionMessageData.author */
	required string author = 1;

	/** @see SessionMessageData.id */
	required string id = 2;

	/** @see SessionText.selfDestructTimeout */
	uint32 selfDestructTimeout = 3;

	/** @see SessionText.text */
	required string text = 4;

	/** @see SessionMessageData.timestamp */
	required double timestamp = 5;
}

/** Represents a form that a user can submit responses to. */
message Form {
	/** Reusable building block consisting of multiple forms. */
	message Component {
		/** @see ElementRow */
		repeated ElementRow rows = 1;
	}

	/** One element of a Form, and one column of an ElementRow. */
	message Element {
		/** Element input type. */
		enum Types {
			Text = 0;
			Checkbox = 1;
			Datepicker = 2;
			Input = 3;
			Number = 4;
			Password = 5;
			Radio = 6;
			Select = 7;
			Slider = 8;
			SlideToggle = 9;
			Textarea = 10;
		}

		/** Title/label. */
		string label = 1;

		/** Input mask. */
		bytes mask = 2;

		/** Maximum numerical value. */
		double max = 3;

		/** Minimum numerical value. */
		double min = 4;

		/** Options to use if type Radio or Select. */
		repeated string options = 5;

		/** Indicates whether required. */
		bool required = 6;

		/** @see Type */
		required Types type = 7;

		/** Value. */
		oneof value {
			bool valueBoolean = 8;
			double valueNumber = 9;
			string valueString = 10;
		}

		/** Flexbox column width (as a percentage of the total row width). */
		uint32 width = 11;
	}

	/** Row of elements. */
	message ElementRow {
		/** @see Element */
		repeated Element elements = 1;
	}

	/** @see Component */
	repeated Component components = 1;
}

/** An asymmetric key pair. */
message KeyPair {
	/** Private key. */
	required bytes privateKey = 1;

	/** Public key. */
	required bytes publicKey = 2;
}

/** A set of supported capabilities. */
message SessionCapabilities {
	/** Native crypto / SubtleCrypto. */
	required bool nativeCrypto = 1;

	/** P2P networking / WebRTC. */
	required bool p2p = 2;
}

/** Misc information about the state of a chat. */
message SessionChatState {
	/** Indicates whether this party is actively typing. */
	required bool isTyping = 1;
}

/** Contains an RPC call for a specific method. */
message SessionCommand {
	/** Argument to pass to method (serialized with MessagePack). */
	bytes argument = 1;

	/** Method name. */
	required string method = 2;
}

/** Message to be sent over a session, indicating some RPC event. */
message SessionMessage {
	/** Event name (e.g. "text"). */
	required string event = 1;

	/** Associated data (e.g. a user-facing chat message). */
	required SessionMessageData data = 2;
}

/** Message data. */
message SessionMessageData {
	/** Author of this message. */
	required string author = 1;

	/** Unique ID. */
	required string id = 2;

	/** Timestamp of this message. */
	required double timestamp = 3;

	/** Arbitrary bytes. */
	bytes bytes = 4;

	/** @see SessionCapabilities */
	SessionCapabilities capabilities = 5;

	/** @see SessionChatState */
	SessionChatState chatState = 6;

	/** @see SessionCommand */
	SessionCommand command = 7;

	/** @see SessionText */
	SessionText text = 8;

	/** @see SessionTextConfirmation */
	SessionTextConfirmation textConfirmation = 9;

	/** @see SessionTransfer */
	SessionTransfer transfer = 10;
}

/** Array of session messages. */
message SessionMessageList {
	/** Messages. */
	repeated SessionMessage messages = 1;
}

/** Contains an actual chat text message. */
message SessionText {
	/** Self-destruction timeout. */
	uint32 selfDestructTimeout = 1;

	/** Message text. */
	required string text = 2;
}

/** Receipt confirmation for a SessionText. */
message SessionTextConfirmation {
	/** SessionText ID to be confirmed. */
	required string id = 1;
}

/** Represents an active file transfer. */
message SessionTransfer {
	/** Possible responses to a transfer request. */
	enum Answers {
		Empty = 0;
		Accepted = 1;
		Rejected = 2;
	}

	/** Indicates a non-response to, acceptance of, or rejection of a file transfer. */
	required Answers answer = 1;

	/** @see SessionMessageData.author */
	required string author = 2;

	/** Unique ID to represent this file transfer. */
	required string id = 3;

	/** Indicates whether file should be handled as an image. */
	required bool image = 4;

	/** If image is true, this will be used as a self-destruct timeout for the message. */
	required uint32 imageSelfDestructTimeout = 5;

	/** Indicates whether file is being sent from this Cyph instance. */
	required bool isOutgoing = 6;

	/** Symmetric key used for encrypting file over the wire. */
	required bytes key = 7;

	/** MIME type. */
	required string mediaType = 8;

	/** File name. */
	required string name = 9;

	/** Indicates the time at which the file was received. */
	double receiptTimestamp = 10;

	/** File size in bytes. */
	required uint32 size = 11;

	/** File URL. */
	required string url = 12;
}


/* Generic/primitive types */

message BooleanArray {
	repeated bool data = 1;
}

message BooleanValue {
	required bool data = 1;
}

message NumberArray {
	repeated double data = 1;
}

message NumberValue {
	required double data = 1;
}

message StringArray {
	repeated string data = 1;
}

message StringValue {
	required string data = 1;
}

message Uint32Array {
	repeated double data = 1;
}

message Uint32Value {
	required double data = 1;
}

